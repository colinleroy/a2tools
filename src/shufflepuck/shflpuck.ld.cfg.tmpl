# No quit configuration (allowing for 4KB in LC)

SYMBOLS {
    __EXEHDR__:        type = import;
    __FILETYPE__:      type = weak,   value = $0006; # ProDOS file type
    __STACKSIZE__:     type = weak,   value = $0800; # 2k stack
    __HIMEM__:         type = weak,   value = $BEFF; # Presumed RAM end
    __LCADDR__:        type = weak,   value = $D400; # Behind quit code
    __LCSIZE__:        type = weak,   value = $0C00; # Rest of bank two
    __HGR_START__:     type = export, value = $2000; # HGR page location
    __HGR_SIZE__:      type = export, value = $2000; # HGR page length
    __OPPONENT_START__:type = export, value = $4000;
    __OPPONENT_SIZE__ :type = export, value = $2000;
    __LOWCODE_START__: type = export, value = $C00;  # Lowcode
    __LOWCODE_SIZE__:  type = export, value = __HGR_START__-__LOWCODE_START__;  # Lowcode
}
FEATURES {
    STARTADDRESS: default = __OPPONENT_START__+__OPPONENT_SIZE__;
}
MEMORY {
    ZP:     file = "", define = yes, start = $0080,        size = $001A;
    HEADER: file = %O,               start = %S - $003A,   size = $003A;
    MAIN:   file = %O, define = yes, start = %S,           size = __HIMEM__ - %S;
    BSS:    file = "",               start = __ONCE_RUN__, size = __HIMEM__ - __STACKSIZE__ - __ONCE_RUN__;
    LC:     file = "", define = yes, start = __LCADDR__,   size = __LCSIZE__;

    #Ugly but functional
    LOWCODE: file = "lowcode.bin",     start = __LOWCODE_START__, size = __LOWCODE_SIZE__;
    TABLE:   file = "table.bin",       start = __HGR_START__,     size = __HGR_SIZE__;

### LEVEL_MEMORY_DECLARATIONS ###
}

SEGMENTS {
    ZEROPAGE: load = ZP,             type = zp;
    EXEHDR:   load = HEADER,         type = ro,  optional = yes;
    STARTUP:  load = MAIN,           type = ro;
    LOWCODE:  load = LOWCODE,        type = ro,  align = $100;
    CODE:     load = MAIN,           type = ro;
    RODATA:   load = MAIN,           type = ro,  align = $100;
    DATA:     load = MAIN,           type = rw;
    INIT:     load = MAIN,           type = rw;
    ONCE:     load = MAIN,           type = ro,  define   = yes;
    LC:       load = MAIN, run = LC, type = ro,  optional = yes,  align = $100;
    BSS:      load = BSS,            type = bss, define   = yes;

    table:    load = TABLE,          type = ro;

### LEVEL_SEGMENTS_DECLARATIONS ###
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
