;
; File generated by cc65 v 2.19 - Git 51b946bf2
;
        .importzp       c_sp
        .importzp       tmp4
        .importzp       _prev_ram_irq_vector, _zp4ip

        .import         decsp4
        .import         _read
        .import         _cache_start
        .import         _cache_end
        .import         _ifd
        .import         floppy_motor_on
        .import         tk1, tk2, tk3, tk4

        .export         _bitbuf, _vbits, _bitbuf_refill
        .export         _getfactor
        .export         get_4datahuff_interpolate
        .import         got_4datahuff

        .export         discard4datahuff_interpolate
        .import         discard_col_loop

        .export         _cache
        .export         _init_floppy_starter
        .export         _next_line_l, _next_line_h
        .export         _raw_image, _huff_ctrl, _huff_data
        .export         _ushiftl3p4, _ushiftl4, _sshiftl4, _ushiftr4
        .export         _div48_l
        .export         _dyndiv_l

        .export         huff_small_1
        .export         huff_small_2
        .export         huff_small_3
        .export         huff_small_4
        .export         huff_small_5

        .importzp       _zp6, _zp11, _zp12, _zp13

        .include        "qtkn_huffgetters.inc"

cur_cache_ptr = _prev_ram_irq_vector

.segment        "DATA"
.align 256
get_4datahuff_interpolate:
               .addr          _cant_happen
               .addr          _get4datahuff2
               .addr          _get4datahuff3
               .addr          _get4datahuff4
               .addr          _get4datahuff5
               .addr          _get4datahuff6
               .addr          _get4datahuff7
               .addr          _get4datahuff8

huff_small_1:  .byte          0, 2, 254
huff_small_2:  .byte          253, 3
huff_small_3:  .byte          239, 251, 5, 17
huff_small_4:  .byte          249, 2, 9, 18
huff_small_5:  .byte          238, 247, 254, 7

eight_min_x:   .byte 8, 7, 6, 5
four_min_x:    .byte 4, 3, 2, 1, 0

.segment        "BSS"
.align 256
_cache:        .res        CACHE_SIZE,$00
CACHE_END = _cache + CACHE_SIZE
.assert <CACHE_END = 0, error

_next_line_l:  .res        322
_ushiftl3p4:   .res        32
free1:         .res        158

_ushiftl4:     .res        256
_sshiftl4:     .res        256
_ushiftr4:     .res        256

.assert <* = 0, error

_huff_ctrl:   .res        (9*256*2)
_huff_data:   .res        (4*256)
_div48_l:     .res        256
_dyndiv_l:    .res        256
.assert <* = 0, error
_raw_image:   .res        (20*320)  ; Cool, this is aligned!
.assert <* = 0, error
_next_line_h:  .res        322

col         = _zp6   ; byte - _decode_row, _consume_extra
num_discard = _zp11
_bitbuf     = _zp12
_vbits      = _zp13
motor_on:    .res 1

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getbithuff (unsigned char n)
; ---------------------------------------------------------------

.segment "CODE"

_init_floppy_starter:
        ldy     #0                      ; Init bitbuf (consider cache full at very start)
        lda     (cur_cache_ptr),y
        sta     _bitbuf
        lda     #8
        sta     _vbits

        ldx     cur_cache_ptr           ; Init local cache pointer
        inx                             ; Consider no crossing at very start
        stx     cache_read
        ldx     cur_cache_ptr+1
        stx     cache_read+1

        lda     floppy_motor_on         ; Patch motor_on if we use a floppy
        beq     :+
        sta     start_floppy_motor+1
        lda     #$C0                    ; Firmware access space
        sta     start_floppy_motor+2
:       rts

REFILLER discardN_fill, discardN_rts, #7

discard4datahuff_interpolate:
        ldy     #4
        cmp     #1            ; Is tree == 1?
        bne     check_2
        DISCARDNBITS discardN_fill, discardN_rts
        dec     col
        jmp     discard_col_loop

check_2:
        cmp     #5            ; is tree < 5 ? 
        bcs     discard_variable
                              ; yes so huff_data[2-5], discard 8 bits
        DISCARD8BITS
        dec     col
        jmp     discard_col_loop

discard_variable:             ; tree > 5, so discard unknown number of bits * 4
        clc
        adc     #>(_huff_data-4*256) ; Tree 6 is at huff_num[1]
        sta     discard_table
        DISCARDNDATAHUFF data_discard_fill,data_discard_rts,discard_table
        dec     col
        jmp     discard_col_loop

REFILLER data_discard_fill, data_discard_rts, #7

REFILLER getfactor_refill, getfactor_refill_done, #7
; Returns value in A
_getfactor:
        lda    #0
        ldy    #6
        ldx     _vbits
:       dex
        bmi    getfactor_refill
getfactor_refill_done:
        asl    _bitbuf
        rol    a
        dey
        bne    :-
        stx     _vbits
        rts

_cant_happen: brk

REFILLER refill2a,refill2a_done, #7, store
REFILLER refill2b,refill2b_done, #7, store

_get4datahuff2:
        GETDATAHUFF1BIT huff_small_2, refill2a,refill2a_done
        stx     tk1+1
        GETDATAHUFF1BIT huff_small_2, refill2b,refill2b_done
        stx     tk2+1
        GETDATAHUFF1BIT huff_small_2, refill2c,refill2c_done
        stx     tk3+1
        GETDATAHUFF1BIT huff_small_2, refill2d,refill2d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill2c,refill2c_done, #7, store
REFILLER refill2d,refill2d_done, #7, store

REFILLER refill3a,refill3a_done, #7
REFILLER refill3b,refill3b_done, #7

_get4datahuff3:
        GETDATAHUFF2BITS huff_small_3, refill3a,refill3a_done
        stx     tk1+1
        GETDATAHUFF2BITS huff_small_3, refill3b,refill3b_done
        stx     tk2+1
        GETDATAHUFF2BITS huff_small_3, refill3c,refill3c_done
        stx     tk3+1
        GETDATAHUFF2BITS huff_small_3, refill3d,refill3d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill3c,refill3c_done, #7
REFILLER refill3d,refill3d_done, #7

REFILLER refill4a,refill4a_done, #7
REFILLER refill4b,refill4b_done, #7

_get4datahuff4:
        GETDATAHUFF2BITS huff_small_4, refill4a,refill4a_done
        stx     tk1+1
        GETDATAHUFF2BITS huff_small_4, refill4b,refill4b_done
        stx     tk2+1
        GETDATAHUFF2BITS huff_small_4, refill4c,refill4c_done
        stx     tk3+1
        GETDATAHUFF2BITS huff_small_4, refill4d,refill4d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill4c,refill4c_done, #7
REFILLER refill4d,refill4d_done, #7

REFILLER refill5a,refill5a_done, #7
REFILLER refill5b,refill5b_done, #7

_get4datahuff5:
        GETDATAHUFF2BITS huff_small_5, refill5a,refill5a_done
        stx     tk1+1
        GETDATAHUFF2BITS huff_small_5, refill5b,refill5b_done
        stx     tk2+1
        GETDATAHUFF2BITS huff_small_5, refill5c,refill5c_done
        stx     tk3+1
        GETDATAHUFF2BITS huff_small_5, refill5d,refill5d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill5c,refill5c_done, #7
REFILLER refill5d,refill5d_done, #7

REFILLER refill6a,refill6a_done, #7, store
REFILLER refill6b,refill6b_done, #7, store

_get4datahuff6:
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+1*256,refill6a,refill6a_done
        stx     tk1+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+1*256,refill6b,refill6b_done
        stx     tk2+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+1*256,refill6c,refill6c_done
        stx     tk3+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+1*256,refill6d,refill6d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill6c,refill6c_done, #7, store
REFILLER refill6d,refill6d_done, #7, store

REFILLER refill7a,refill7a_done, #7, store
REFILLER refill7b,refill7b_done, #7, store

_get4datahuff7:
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+2*256,refill7a,refill7a_done
        stx     tk1+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+2*256,refill7b,refill7b_done
        stx     tk2+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+2*256,refill7c,refill7c_done
        stx     tk3+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+2*256,refill7d,refill7d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill7c,refill7c_done, #7, store
REFILLER refill7d,refill7d_done, #7, store

REFILLER refill8a,refill8a_done, #7, store
REFILLER refill8b,refill8b_done, #7, store

_get4datahuff8:
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+3*256,refill8a,refill8a_done
        stx     tk1+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+3*256,refill8b,refill8b_done
        stx     tk2+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+3*256,refill8c,refill8c_done
        stx     tk3+1
        GETDATAHUFF2BITSPLUS_SAFE _huff_data+3*256,refill8d,refill8d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill8c,refill8c_done, #7, store
REFILLER refill8d,refill8d_done, #7, store

; Must never destroy A or Y
_bitbuf_refill:
cache_read = *+1
        ldx     $FFFF             ; 4
        stx     _bitbuf           ; 7

        inc     cache_read        ; 17
        beq     inc_cache_high    ; 19  20
        rts

inc_cache_high:
        inc     cache_read+1      ;     25
        ldx     cache_read+1      ;     27

        ; Check for cache almost-end and restart floppy
        ; Consider we have time to handle 256b while the
        ; drive restarts
        cpx     #(>CACHE_END)-4   ;     29
        bcs     start_floppy_motor;     31  32
        rts

start_floppy_motor:
        sta     motor_on                 ; Patched if on floppy

        cpx     #(>CACHE_END)
        beq     do_read
        rts
do_read:
        sty     ybck
        sta     abck
        ; Push read fd
        jsr     decsp4
        ldy     #$03

        lda     #$00                    ; ifd is never going to be > 255
        sta     (c_sp),y
        dey
        lda     _ifd
        sta     (c_sp),y
        dey

        ; Push buffer
        lda     _cache_start+1
        sta     cache_read+1
        sta     (c_sp),y
        dey

        lda     _cache_start
        sta     cache_read
        sta     (c_sp),y

        ; Push count (CACHE_SIZE)
        lda     #<CACHE_SIZE
        ldx     #>CACHE_SIZE
        jsr     _read
        clc
ybck = *+1
        ldy     #$FF
abck = *+1
        lda     #$FF
        rts
