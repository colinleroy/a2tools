;
; File generated by cc65 v 2.19 - Git 51b946bf2
;
        .importzp       c_sp
        .importzp       tmp4
        .importzp       _prev_ram_irq_vector, _zp4ip

        .import         decsp4
        .import         _read
        .import         _cache_start
        .import         _cache_end
        .import         _ifd
        .import         floppy_motor_on
        .export         _huff_numc, _huff_numc_h
        .export         _huff_numd, _huff_numd_h
        .export         _getbits6, _getctrlhuff, _getdatahuff, _getdatahuff8
        .export         _cache
        .export         _init_floppy_starter
        .export         _buf_0, _buf_1
        .export         _raw_image, _huff_ctrl, _huff_data
        .export         _shiftl4n_l, _shiftl4n_h
        .export         _shiftl4p_l, _shiftl4p_h
        .export         _div48_l, _div48_h
        .export         _refill_ret
        .export         _getctrlhuff_refilled
        .export         _getdatahuff_refilled
        .export         _getdatahuff8_refilled
        .importzp       _zp8, _zp9, _zp10, _zp11, _zp12
cur_cache_ptr = _prev_ram_irq_vector

.segment        "BSS"
.align 256
_cache:        .res        CACHE_SIZE,$00
CACHE_END = _cache + CACHE_SIZE
.assert <CACHE_END = 0, error

buf0l:         .res        322
_shiftl4n_l:   .res        190  ; signed shift left 4 table, neg vals, low byte
buf0h:         .res        322
_shiftl4n_h:   .res        190  ; signed shift left 4 table, neg vals, high byte

buf1l:         .res        322
_shiftl4p_l:   .res        190  ; signed shift left 4 table, pos vals, low byte
buf1h:         .res        322
_shiftl4p_h:   .res        190  ; signed shift left 4 table, pos vals, high byte

.assert <* = 0, error
_buf_0 = buf0l
_buf_1 = buf1l

_huff_ctrl:   .res        (9*256*2)
_huff_data:   .res        (9*256)
_div48_l:     .res        256
_div48_h:     .res        256
.assert <* = 0, error
_raw_image:   .res        (20*320)

_bitbuf     = _zp8
readn       = _zp9
_vbits      = _zp10
motor_on:    .res 1

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getbithuff (unsigned char n)
; ---------------------------------------------------------------

.segment        "CODE"

_init_floppy_starter:
        ldy     #0                      ; Init bitbuf (consider cache full at very start)
        lda     (cur_cache_ptr),y
        sta     _bitbuf
        lda     #8
        sta     _vbits

        ldx     cur_cache_ptr           ; Init local cache pointer
        inx                             ; Consider no crossing at very start
        stx     cache_read
        ldx     cur_cache_ptr+1
        stx     cache_read+1

        lda     floppy_motor_on         ; Patch motor_on if we use a floppy
        beq     :+
        sta     start_floppy_motor+1
        lda     #$C0                    ; Firmware access space
        sta     start_floppy_motor+2
:       rts

; refill is optimised to go back as fast as possible to
; getbithuff (which is hotter than getbit6 and getdatahuff8,
; called respectively 200000, 5000, 360 times). Instead of
; using jsr with a 6-cycle penalty compared to double-jmps,
; we'll use double-jmps, and update the return jmp target
; before and after getbits6/huff36.
.macro UPDATE_REFILL_RET addr
        ldx    #<addr
        stx    _refill_ret+1
        ldx    #>addr
        stx    _refill_ret+2
.endmacro

refill_getbits6:
        UPDATE_REFILL_RET getbits6_refilled
        jmp    refill

_getbits6:
        lda    #0
        ldy    #6
:       dec    _vbits
        bmi    refill_getbits6
getbits6_refilled:
        asl    _bitbuf
        rol    a
        dey
        bne    :-
        rts


_getctrlhuff:
        lda    #0             ; r = 0
        tay                   ; n = 0

:       iny                   ; Read until valid code
        dec    _vbits
        bmi    refill         ; Refill return address updated by caller
_getctrlhuff_refilled:
        asl    _bitbuf
        rol    a
        sta    bitscheckc+1    ; Patch bitcheck address
                              ; cpy $nnnn,x is impossible so this is faster

bitscheckc:
_huff_numc = *+2             ; Get num bits
        cpy     _huff_ctrl
        bne    :-

        tax
_huff_numc_h = *+2
        lda     _huff_ctrl+256,x
        rts


_getdatahuff:
        lda    #0             ; r = 0
        tay                   ; n = 0

:       iny                   ; Read until valid code
        dec    _vbits
        bmi    refill         ; Refill return address updated by caller
_getdatahuff_refilled:
        asl    _bitbuf
        rol    a
        sta    bitscheckd+1    ; Patch bitcheck address
                              ; cpy $nnnn,x is impossible so this is faster

bitscheckd:
_huff_numd = *+2             ; Get num bits
        cpy     _huff_data
        bne    :-

        tax
_huff_numd_h = *+2
        lda     _huff_data+128,x
        rts

; Must never destroy A or Y
refill:

cache_read = *+1
        ldx     $FFFF
        stx     _bitbuf

        ldx     #7
        stx     _vbits

        inc     cache_read
        beq     inc_cache_high
_refill_ret:
        jmp     $FFFF

inc_cache_high:
        inc     cache_read+1
        ldx     cache_read+1

        ; Check for cache almost-end and restart floppy
        ; Consider we have time to handle 256b while the
        ; drive restarts
        cpx     #(>CACHE_END)-4
        bcc     _refill_ret

start_floppy_motor:
        sta     motor_on                 ; Patched if on floppy

        cpx     #(>CACHE_END)
        bne     _refill_ret
do_read:
        sty     ybck
        sta     abck
        ; Push read fd
        jsr     decsp4
        ldy     #$03

        lda     #$00                    ; ifd is never going to be > 255
        sta     (c_sp),y
        dey
        lda     _ifd
        sta     (c_sp),y
        dey

        ; Push buffer
        lda     _cache_start+1
        sta     cache_read+1
        sta     (c_sp),y
        dey

        lda     _cache_start
        sta     cache_read
        sta     (c_sp),y

        ; Push count (CACHE_SIZE)
        lda     #<CACHE_SIZE
        ldx     #>CACHE_SIZE
        jsr     _read
        clc
ybck = *+1
        ldy     #$FF
abck = *+1
        lda     #$FF
        jmp     _refill_ret

_getdatahuff8:
        lda     #0             ; Read and consume 5 bits
        ldy     #5
:       dec     _vbits
        bmi     refill         ; Refill return address updated by caller
_getdatahuff8_refilled:
        asl     _bitbuf
        rol     a
        dey
        bne     :-

        asl
        asl
        asl
        ora     #$04
        rts
