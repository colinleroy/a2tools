;
; File generated by cc65 v 2.19 - Git 51b946bf2
;
        .importzp       c_sp
        .importzp       tmp4
        .importzp       _prev_ram_irq_vector, _zp4ip

        .import         decsp4
        .import         _read
        .import         _cache_start
        .import         _cache_end
        .import         _ifd
        .import         floppy_motor_on
        .import         tk1, tk2, tk3, tk4

        .export         _bitbuf, _vbits, _bitbuf_refill
        .export         _getbits6
        .export         get4datatab
        .import         got_4datahuff

        .export         _cache
        .export         _init_floppy_starter
        .export         _next_line_l, _next_line_h
        .export         _raw_image, _huff_ctrl, _huff_data
        .export         _ushiftl3p4, _ushiftl4, _sshiftl4, _ushiftr4
        .export         _div48_l
        .export         _dyndiv_l
        .importzp       _zp12, _zp13

        .include        "qtkn_huffgetters.inc"

cur_cache_ptr = _prev_ram_irq_vector

.segment        "DATA"
.align 256
get4datatab:   .addr          _get4datahuff0
               .addr          _get4datahuff1
               .addr          _get4datahuff2
               .addr          _get4datahuff3
               .addr          _get4datahuff4
               .addr          _get4datahuff5
               .addr          _get4datahuff6
               .addr          _get4datahuff7
               .addr          _get4datahuff8

.segment        "BSS"
.align 256
_cache:        .res        CACHE_SIZE,$00
CACHE_END = _cache + CACHE_SIZE
.assert <CACHE_END = 0, error

_next_line_l:  .res        322
_ushiftl3p4:   .res        32
free1:         .res        158

_ushiftl4:     .res        256
_sshiftl4:     .res        256
_ushiftr4:     .res        256

.assert <* = 0, error

_huff_ctrl:   .res        (9*256*2)
_huff_data:   .res        (9*256)
_div48_l:     .res        256
_dyndiv_l:    .res        256
.assert <* = 0, error
_raw_image:   .res        (20*320)  ; Cool, this is aligned!
.assert <* = 0, error
_next_line_h:  .res        322

_bitbuf     = _zp12
_vbits      = _zp13
motor_on:    .res 1

; ---------------------------------------------------------------
; unsigned char __near__ __fastcall__ getbithuff (unsigned char n)
; ---------------------------------------------------------------

.segment        "CODE"

_init_floppy_starter:
        ldy     #0                      ; Init bitbuf (consider cache full at very start)
        lda     (cur_cache_ptr),y
        sta     _bitbuf
        lda     #8
        sta     _vbits

        ldx     cur_cache_ptr           ; Init local cache pointer
        inx                             ; Consider no crossing at very start
        stx     cache_read
        ldx     cur_cache_ptr+1
        stx     cache_read+1

        lda     floppy_motor_on         ; Patch motor_on if we use a floppy
        beq     :+
        sta     start_floppy_motor+1
        lda     #$C0                    ; Firmware access space
        sta     start_floppy_motor+2
:       rts

REFILLER getbits6_refill, getbits6_refill_done
; Returns value in A
_getbits6:
        lda    #0
        ldy    #6
        ldx     _vbits
:       dex
        bmi    getbits6_refill
getbits6_refill_done:
        asl    _bitbuf
        rol    a
        dey
        bne    :-
        stx     _vbits
        rts

REFILLER refill0a,refill0a_done
REFILLER refill0b,refill0b_done
REFILLER refill0c,refill0c_done
REFILLER refill0d,refill0d_done
_get4datahuff0:
        GETDATAHUFF _huff_data+0*256,refill0a,refill0a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+0*256,refill0b,refill0b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+0*256,refill0c,refill0c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+0*256,refill0d,refill0d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill1a,refill1a_done
REFILLER refill1b,refill1b_done
REFILLER refill1c,refill1c_done
REFILLER refill1d,refill1d_done
_get4datahuff1:
        GETDATAHUFF _huff_data+1*256,refill1a,refill1a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+1*256,refill1b,refill1b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+1*256,refill1c,refill1c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+1*256,refill1d,refill1d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill2a,refill2a_done
REFILLER refill2b,refill2b_done
REFILLER refill2c,refill2c_done
REFILLER refill2d,refill2d_done
_get4datahuff2:
        GETDATAHUFF _huff_data+2*256,refill2a,refill2a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+2*256,refill2b,refill2b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+2*256,refill2c,refill2c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+2*256,refill2d,refill2d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill3a,refill3a_done
REFILLER refill3b,refill3b_done
REFILLER refill3c,refill3c_done
REFILLER refill3d,refill3d_done
_get4datahuff3:
        GETDATAHUFF _huff_data+3*256,refill3a,refill3a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+3*256,refill3b,refill3b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+3*256,refill3c,refill3c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+3*256,refill3d,refill3d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill4a,refill4a_done
REFILLER refill4b,refill4b_done
REFILLER refill4c,refill4c_done
REFILLER refill4d,refill4d_done
_get4datahuff4:
        GETDATAHUFF _huff_data+4*256,refill4a,refill4a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+4*256,refill4b,refill4b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+4*256,refill4c,refill4c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+4*256,refill4d,refill4d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill5a,refill5a_done
REFILLER refill5b,refill5b_done
REFILLER refill5c,refill5c_done
REFILLER refill5d,refill5d_done
_get4datahuff5:
        GETDATAHUFF _huff_data+5*256,refill5a,refill5a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+5*256,refill5b,refill5b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+5*256,refill5c,refill5c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+5*256,refill5d,refill5d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill6a,refill6a_done
REFILLER refill6b,refill6b_done
REFILLER refill6c,refill6c_done
REFILLER refill6d,refill6d_done
_get4datahuff6:
        GETDATAHUFF _huff_data+6*256,refill6a,refill6a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+6*256,refill6b,refill6b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+6*256,refill6c,refill6c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+6*256,refill6d,refill6d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill7a,refill7a_done
REFILLER refill7b,refill7b_done
REFILLER refill7c,refill7c_done
REFILLER refill7d,refill7d_done
_get4datahuff7:
        GETDATAHUFF _huff_data+7*256,refill7a,refill7a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+7*256,refill7b,refill7b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+7*256,refill7c,refill7c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+7*256,refill7d,refill7d_done
        stx     tk4+1
        jmp     got_4datahuff

REFILLER refill8a,refill8a_done
REFILLER refill8b,refill8b_done
REFILLER refill8c,refill8c_done
REFILLER refill8d,refill8d_done
_get4datahuff8:
        GETDATAHUFF _huff_data+8*256,refill8a,refill8a_done
        stx     tk1+1
        GETDATAHUFF _huff_data+8*256,refill8b,refill8b_done
        stx     tk2+1
        GETDATAHUFF _huff_data+8*256,refill8c,refill8c_done
        stx     tk3+1
        GETDATAHUFF _huff_data+8*256,refill8d,refill8d_done
        stx     tk4+1
        jmp     got_4datahuff

; Must never destroy A or Y
_bitbuf_refill:
cache_read = *+1
        ldx     $FFFF             ; 4
        stx     _bitbuf           ; 7

        ldx     #7                ; 9
        stx     _vbits            ; 12

        inc     cache_read        ; 17
        beq     inc_cache_high    ; 19  20
        rts

inc_cache_high:
        inc     cache_read+1      ;     25
        ldx     cache_read+1      ;     27

        ; Check for cache almost-end and restart floppy
        ; Consider we have time to handle 256b while the
        ; drive restarts
        cpx     #(>CACHE_END)-4   ;     29
        bcs     start_floppy_motor;     31  32
        ldx     #7                ; Reload vbits
        rts

start_floppy_motor:
        sta     motor_on                 ; Patched if on floppy

        cpx     #(>CACHE_END)
        beq     do_read
        ldx     #7                ; Reload vbits
        rts
do_read:
        sty     ybck
        sta     abck
        ; Push read fd
        jsr     decsp4
        ldy     #$03

        lda     #$00                    ; ifd is never going to be > 255
        sta     (c_sp),y
        dey
        lda     _ifd
        sta     (c_sp),y
        dey

        ; Push buffer
        lda     _cache_start+1
        sta     cache_read+1
        sta     (c_sp),y
        dey

        lda     _cache_start
        sta     cache_read
        sta     (c_sp),y

        ; Push count (CACHE_SIZE)
        lda     #<CACHE_SIZE
        ldx     #>CACHE_SIZE
        jsr     _read
        clc
ybck = *+1
        ldy     #$FF
abck = *+1
        lda     #$FF
        ldx     #7                ; Reload vbits
        rts
