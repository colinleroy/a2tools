;
; File generated by cc65 v 2.19 - Git 54a2410b5
;
	.fopt		compiler,"cc65 v 2.19 - Git 54a2410b5"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	c_sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.import		_realloc
	.import		_free
	.import		_atol
	.import		_malloc0
	.import		_surl_get_json
	.import		__strnsplit_int
	.import		_translit_charset
	.import		_gen_buf
	.import		_lines
	.import		_date_format
	.export		_account_new_from_json
	.import		_account_new_from_lines
	.import		_atoc
	.import		_NUMCOLS
	.import		_RIGHT_COL_START

.segment	"DATA"

_field_selector:
	.addr	S0040

.segment	"RODATA"

S0042:
	.byte	$2E,$69,$64,$2C,$2E,$64,$69,$73,$70,$6C,$61,$79,$5F,$6E,$61,$6D
	.byte	$65,$2C,$2E,$61,$63,$63,$74,$2C,$2E,$75,$73,$65,$72,$6E,$61,$6D
	.byte	$65,$2C,$2E,$63,$72,$65,$61,$74,$65,$64,$5F,$61,$74,$2C,$2E,$66
	.byte	$6F,$6C,$6C,$6F,$77,$65,$72,$73,$5F,$63,$6F,$75,$6E,$74,$2C,$2E
	.byte	$66,$6F,$6C,$6C,$6F,$77,$69,$6E,$67,$5F,$63,$6F,$75,$6E,$74,$2C
	.byte	$28,$2E,$66,$69,$65,$6C,$64,$73,$7C,$6C,$65,$6E,$67,$74,$68,$29
	.byte	$00
S0040:
	.byte	$2E,$66,$69,$65,$6C,$64,$73,$5B,$69,$5D,$7C,$28,$2E,$6E,$61,$6D
	.byte	$65,$2B,$22,$3A,$20,$22,$2B,$2E,$76,$61,$6C,$75,$65,$29,$00
S0045:
	.byte	$2E,$6E,$6F,$74,$65,$00

; ---------------------------------------------------------------
; struct _account *__near__ account_new_from_json (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_account_new_from_json: near

.segment	"CODE"

;
; account *a = NULL;
;
	jsr     push0
;
; if (surl_get_json(gen_buf,
;
	lda     #<(_gen_buf)
	ldx     #>(_gen_buf)
	jsr     pushax
;
; ".following_count,(.fields|length)",
;
	lda     #<(S0042)
	ldx     #>(S0042)
	jsr     pushax
;
; translit_charset, SURL_HTMLSTRIP_NONE, BUF_SIZE) >= 0) {
;
	lda     _translit_charset
	ldx     _translit_charset+1
	jsr     pushax
	lda     #$00
	jsr     pusha
	ldx     #$02
	jsr     _surl_get_json
	txa
	jmi     L0009
;
; n_lines = strnsplit_in_place(gen_buf, '\n', lines, 8);
;
	lda     #$01
	jsr     pusha
	lda     #<(_gen_buf)
	ldx     #>(_gen_buf)
	jsr     pushax
	lda     #$0A
	jsr     pusha
	lda     #<(_lines)
	ldx     #>(_lines)
	jsr     pushax
	ldx     #$00
	lda     #$08
	jsr     __strnsplit_int
	sta     M0003
;
; if (n_lines == 8) {
;
	cmp     #$08
	jne     L0009
;
; a = account_new_from_lines();
;
	jsr     _account_new_from_lines
	jsr     stax0sp
;
; a->created_at = date_format(lines[4], 0);
;
	jsr     pushax
	lda     _lines+8
	ldx     _lines+8+1
	jsr     pushax
	lda     #$00
	jsr     _date_format
	ldy     #$1C
	jsr     staxspidx
;
; a->followers_count = atol(lines[5]);
;
	jsr     pushw0sp
	lda     _lines+10
	ldx     _lines+10+1
	jsr     _atol
	ldy     #$1E
	jsr     steaxspidx
;
; a->following_count = atol(lines[6]);
;
	jsr     pushw0sp
	lda     _lines+12
	ldx     _lines+12+1
	jsr     _atol
	ldy     #$22
	jsr     steaxspidx
;
; i = atoc(lines[7]);
;
	lda     _lines+14
	ldx     _lines+14+1
	jsr     _atoc
	sta     M0002
;
; if (i > MAX_ACCT_FIELDS) {
;
	cmp     #$05
	bcc     L0004
;
; i = MAX_ACCT_FIELDS;
;
	lda     #$04
	sta     M0002
;
; a->fields = malloc0(sizeof(char *)*i);
;
L0004:	jsr     pushw0sp
	ldx     #$00
	lda     M0002
	asl     a
	bcc     L000A
	inx
L000A:	jsr     _malloc0
	ldy     #$28
	jsr     staxspidx
;
; a->n_fields = i;
;
	jsr     ldptr10sp
	lda     M0002
	ldy     #$2A
	sta     (ptr1),y
;
; while (i) {
;
	jmp     L0007
;
; char len = NUMCOLS - RIGHT_COL_START - 1;
;
L0005:	lda     _NUMCOLS
	sec
	sbc     _RIGHT_COL_START
	sec
	sbc     #$01
	jsr     pusha
;
; i--;
;
	dec     M0002
;
; field_selector[FIELD_SELECTOR_NUM] = i+'0';
;
	lda     _field_selector
	ldx     _field_selector+1
	jsr     incax8
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     M0002
	ldy     #$30
	jsr     incaxy
	ldy     #$00
	sta     (ptr1),y
;
; a->fields[i] = malloc0(len);
;
	ldy     #$02
	jsr     ldaxysp
	ldy     #$29
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     M0002
	asl     a
	bcc     L000D
	inx
	clc
L000D:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (c_sp),y
	jsr     _malloc0
	ldy     #$00
	jsr     staxspidx
;
; surl_get_json(a->fields[i], field_selector, translit_charset, SURL_HTMLSTRIP_FULL, len);
;
	ldy     #$02
	jsr     ldaxysp
	ldy     #$29
	jsr     ldaxidx
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     M0002
	asl     a
	bcc     L000E
	inx
	clc
L000E:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	tax
	pla
	jsr     pushw
	lda     _field_selector
	ldx     _field_selector+1
	jsr     pushax
	lda     _translit_charset
	ldx     _translit_charset+1
	jsr     pushax
	lda     #$01
	jsr     pusha
	ldy     #$07
	ldx     #$00
	lda     (c_sp),y
	jsr     _surl_get_json
;
; }
;
	jsr     incsp1
;
; while (i) {
;
L0007:	lda     M0002
	jne     L0005
;
; note = malloc0(2048);
;
	ldx     #$08
	jsr     _malloc0
	sta     M0004
	stx     M0004+1
;
; r = surl_get_json(note, ".note", translit_charset, SURL_HTMLSTRIP_FULL, 2048);
;
	jsr     pushax
	lda     #<(S0045)
	ldx     #>(S0045)
	jsr     pushax
	lda     _translit_charset
	ldx     _translit_charset+1
	jsr     pushax
	lda     #$01
	jsr     pusha
	ldx     #$08
	lda     #$00
	jsr     _surl_get_json
	sta     M0001
	stx     M0001+1
;
; if (r < 0) {
;
	cpx     #$80
	bcc     L0008
;
; free(note);
;
	lda     M0004
	ldx     M0004+1
	jsr     _free
;
; } else {
;
	jmp     L0009
;
; a->note = realloc(note, r + 1);
;
L0008:	jsr     pushw0sp
	lda     M0004
	ldx     M0004+1
	jsr     pushax
	lda     M0001
	ldx     M0001+1
	jsr     incax1
	jsr     _realloc
	ldy     #$26
	jsr     staxspidx
;
; }
;
L0009:	jmp     popax

.segment	"BSS"

M0001:
	.res	2,$00
M0002:
	.res	1,$00
M0003:
	.res	1,$00
M0004:
	.res	2,$00

.endproc

